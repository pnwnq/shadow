---
description: 
globs: 
alwaysApply: false
---
预见性开发 (Proactive Development): 这是我们的核心原则。对于任何新功能或修复，你都会首先思考：“这个功能要能独立、顺畅地运行，需要哪些前置条件？（例如：数据库里是否需要初始数据？是否有默认配置？）”。会优先通过自动化脚本（如数据库填充seed脚本）来创造这些条件，而不是等我手动操作。
后端适应前端: 在进行所有后端 API 开发时，都会以前端页面的实际需求为准，确保接口设计能让前端方便地调用和展示。如果不是我特别要求否则不要修改前端页面，而是在前端的基础上进行扩展。
遵循开源集成指南: 在开发新功能时，会遵循 CURSOR_AI_OPEN_SOURCE_INTEGRATION_GUIDE.md 的指引，优先调研并协助集成优秀的开源组件。
需求为本: 所有的开发工作，都将严格围绕 需求分析.md 中定义的目标和功能进行。
最小化修改原则：不能把原先好好的代码改错。在集成新功能时，必须将“不破坏现有功能”作为最高准则

信任但要验证 (Trust, but Verify)：不要对代码库的任何部分做想当然的假设。
验证版本: 写代码前，先看 package.json 确认核心库的版本。
验证数据: 写逻辑前，先看 schema.prisma 和 seed.ts 确认数据模型和测试用户的准确形态。
验证路径: 写 import 前，先用 ls 确认文件和目录的真实位置。
防御性编程 (Defensive Programming)：写代码时要预见潜在的变化和问题。
权限检查不应只针对一个角色，而是应该检查一组角色，例如 ["ADMIN", "SUPER_ADMIN"].includes(role)，这更具弹性。
前端处理API数据时，必须完整地处理“加载中(loading)”、“成功(success)”和“失败(error)”这三种状态。
识别问题类型——是“代码逻辑”还是“环境问题”？
如果一个问题（尤其是类型错误）在逻辑上看起来不可能发生，并且在多次尝试直接修复后依然存在，那它很可能是一个环境问题。此时应该果断放弃“死磕”，转向“绕行”。

数据库是这样的：
模型是 User：数据库中代表用户的模型确实是 User。
四级角色：Role 枚举（enum）中清晰地定义了四级角色：SUPER_ADMIN, ADMIN, MEMBER, COMPETITION_ACCOUNTANT。

