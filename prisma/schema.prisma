// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String                 @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  studentId            String?                @unique
  major                String?
  role                 Role                   @default(MEMBER)
  status               UserStatus             @default(PENDING)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  accounts             Account[]
  sessions             Session[]
  documents            Document[]
  logs                 AuditLog[]
  posts                CommunityPost[]
  comments             CommunityComment[]
  votes                CommunityPostVote[]
  notifications        Notification[]
  CommunityCommentVote CommunityCommentVote[]

  // Relations for Item Management
  ownedItems   Item[]    @relation("ItemOwner")
  borrowedItems Item[]    @relation("ItemBorrower")
  itemLogs     ItemLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
  COMPETITION_ACCOUNTANT
}

enum UserStatus {
  PENDING
  ACTIVE
}

model Document {
  id          String   @id @default(cuid())
  title       String
  fileName    String
  description String?
  url         String
  type        String
  size        Float
  category    String
  tags        String[]
  isTemplate  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id])

  @@index([uploaderId])
}

enum LogLevel {
  INFO
  WARN
  ERROR
  AUDIT
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  ip         String?
  type       String?
  level      String?
  timestamp  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model SystemSetting {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Community Feature Models
model CommunityCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  posts       CommunityPost[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum CommunityPostType {
  BLOG
  QUESTION
  DISCUSSION
}

model CommunityPost {
  id         String              @id @default(cuid())
  title      String
  content    String?             @db.Text
  type       CommunityPostType   @default(BLOG)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  author     User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  category   CommunityCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?
  comments   CommunityComment[]
  votes      CommunityPostVote[]
  viewCount  Int                 @default(0)
}

model CommunityComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // for replies
  replyToId String?
  replyTo   CommunityComment?  @relation("Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   CommunityComment[] @relation("Replies")

  // for votes
  votes CommunityCommentVote[]
}

model CommunityPostVote {
  id     String        @id @default(cuid())
  type   VoteType
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId])
}

model CommunityCommentVote {
  id        String           @id @default(cuid())
  type      VoteType
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   CommunityComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
}

enum VoteType {
  UP
  DOWN
}

// End of Community Feature Models

// Item Management Models
enum ItemStatus {
  IN_STOCK
  BORROWED
  IN_REPAIR
  DISPOSED
}

enum ItemLogAction {
  CREATE
  UPDATE
  DELETE
  BORROW
  RETURN
  REPAIR
  DISPOSE
}

model ItemCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id           String       @id @default(cuid())
  name         String
  model        String?
  serialNumber String?      @unique
  purchaseDate DateTime?
  price        Float?
  location     String?
  status       ItemStatus   @default(IN_STOCK)
  nfcTagId     String?      @unique
  imageUrl     String?
  notes        String?      @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  category     ItemCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId   String

  owner        User?        @relation("ItemOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId      String?

  borrowedBy   User?        @relation("ItemBorrower", fields: [borrowedById], references: [id], onDelete: SetNull)
  borrowedById String?
  borrowedAt   DateTime?

  logs         ItemLog[]

  @@index([categoryId])
  @@index([ownerId])
  @@index([borrowedById])
}

model ItemLog {
  id        String        @id @default(cuid())
  action    ItemLogAction
  details   Json?
  createdAt DateTime      @default(now())

  item      Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String

  user      User          @relation(fields: [userId], references: [id])
  userId    String

  @@index([itemId])
  @@index([userId])
}

// End of Item Management Models

model Notification {
  id          String   @id @default(cuid())
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  payload     Json
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
